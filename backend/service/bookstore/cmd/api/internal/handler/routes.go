// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	book "backend/service/bookstore/cmd/api/internal/handler/book"
	bookOrder "backend/service/bookstore/cmd/api/internal/handler/bookOrder"
	reader "backend/service/bookstore/cmd/api/internal/handler/reader"
	verifyCode "backend/service/bookstore/cmd/api/internal/handler/verifyCode"
	"backend/service/bookstore/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/book/list",
					Handler: book.BookListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/book/delete",
					Handler: book.BookDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/book/deleteBatch",
					Handler: book.BookDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/book/find",
					Handler: book.BookFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/book/add",
					Handler: book.BookAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/book/update",
					Handler: book.BookUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/book/appList",
				Handler: book.BookAppListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/appFind",
				Handler: book.BookAppFindOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/counts",
				Handler: book.CountsHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/bookOrder/list",
					Handler: bookOrder.BookOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/bookOrder/delete",
					Handler: bookOrder.BookOrderDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/bookOrder/deleteBatch",
					Handler: bookOrder.BookOrderDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bookOrder/find",
					Handler: bookOrder.BookOrderFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bookOrder/add",
					Handler: bookOrder.BookOrderAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/bookOrder/update",
					Handler: bookOrder.BookOrderUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPut,
				Path:    "/bookOrder/returnBook",
				Handler: bookOrder.ReturnBookHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bookOrder/checkBorrow",
				Handler: bookOrder.CheckBorrowHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bookOrder/borrowBook",
				Handler: bookOrder.BorrowBookHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bookOrder/borrowList",
				Handler: bookOrder.BorrowListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bookOrder/borrowDetail",
				Handler: bookOrder.BorrowDetailHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPut,
				Path:    "/reader/updatePwd",
				Handler: reader.UpdatePwdHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/reader/login",
				Handler: reader.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/reader/register",
				Handler: reader.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/reader/sendVerifyCode",
				Handler: reader.SendVerifyCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/reader/findPassword",
				Handler: reader.FindPasswordHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/reader/list",
					Handler: reader.ReaderListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/reader/delete",
					Handler: reader.ReaderDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/reader/deleteBatch",
					Handler: reader.ReaderDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reader/find",
					Handler: reader.ReaderFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reader/add",
					Handler: reader.ReaderAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/reader/update",
					Handler: reader.ReaderUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/verifyCode/list",
					Handler: verifyCode.VerifyCodeListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/verifyCode/delete",
					Handler: verifyCode.VerifyCodeDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/verifyCode/deleteBatch",
					Handler: verifyCode.VerifyCodeDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/verifyCode/find",
					Handler: verifyCode.VerifyCodeFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/verifyCode/add",
					Handler: verifyCode.VerifyCodeAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/verifyCode/update",
					Handler: verifyCode.VerifyCodeUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
