// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	activitiesFieldNames          = builder.RawFieldNames(&Activities{})
	activitiesRows                = strings.Join(activitiesFieldNames, ",")
	activitiesRowsExpectAutoSet   = strings.Join(stringx.Remove(activitiesFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), ",")
	activitiesRowsWithPlaceHolder = strings.Join(stringx.Remove(activitiesFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), "=?,") + "=?"

	cacheDbZeromicroActivitiesIdPrefix = "cache:dbZeromicro:activities:id:"
)

type (
	activitiesModel interface {
		Insert(ctx context.Context, data *Activities) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Activities, error)
		FindOneByName(ctx context.Context, keyword string) (*Activities, error)
		List(ctx context.Context, page, pageSize int64, keyword string) ([]*Activities, int64, error)
		Update(ctx context.Context, data *Activities) error
		Delete(ctx context.Context, id int64) error
		DeleteBatch(ctx context.Context, ids string) error
	}

	defaultActivitiesModel struct {
		sqlc.CachedConn
		table string
	}

	Activities struct {
		Id          int64     `db:"id"`          // ID
		Title       string    `db:"title"`       // 标题
		Address     string    `db:"address"`     // 活动地址
		TimeStart   int64     `db:"time_start"`  // 开始时间
		TimeEnd     int64     `db:"time_end"`    // 结束时间
		Description string    `db:"description"` // 简介
		Quantity    int64     `db:"quantity"`    // 数量
		Cover       string    `db:"cover"`       // 封面
		Sort        int64     `db:"sort"`        // 排序
		CreateBy    string    `db:"create_by"`   // 创建者
		UpdateBy    string    `db:"update_by"`   // 更新者
		CreatedAt   time.Time `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time `db:"updated_at"`  // 更新时间
		DeletedAt   time.Time `db:"deleted_at"`  // 删除时间
	}
)

func newActivitiesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActivitiesModel {
	return &defaultActivitiesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`activities`",
	}
}

func (m *defaultActivitiesModel) Delete(ctx context.Context, id int64) error {
	dbZeromicroActivitiesIdKey := fmt.Sprintf("%s%v", cacheDbZeromicroActivitiesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `deleted_at`=? where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, time.Now().Format("2006-01-02 15:04:05"), id)
	}, dbZeromicroActivitiesIdKey)
	return err
}

func (m *defaultActivitiesModel) DeleteBatch(ctx context.Context, ids string) error {
	query := fmt.Sprintf("update %s set `deleted_at`=? where `id` in (%s)", m.table, ids)
	_, err := m.ExecNoCacheCtx(ctx, query, time.Now().Format("2006-01-02 15:04:05"))
	// 删除缓存
	idArr := strings.Split(ids, ",")
	for _, id := range idArr {
		dbZeromicroIdKey := fmt.Sprintf("%s%v", cacheDbZeromicroActivitiesIdPrefix, id)
		m.DelCache(dbZeromicroIdKey)
	}

	return err
}
func (m *defaultActivitiesModel) FindOne(ctx context.Context, id int64) (*Activities, error) {
	dbZeromicroActivitiesIdKey := fmt.Sprintf("%s%v", cacheDbZeromicroActivitiesIdPrefix, id)
	var resp Activities
	err := m.QueryRowCtx(ctx, &resp, dbZeromicroActivitiesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", activitiesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActivitiesModel) FindOneByName(ctx context.Context, keyword string) (*Activities, error) {
	var resp Activities
	query := fmt.Sprintf("select %s from %s where %s and `name` = ? limit 1", activitiesRows, m.table, "`deleted_at`='2006-01-02 15:04:05'")
	err := m.CachedConn.QueryRowNoCacheCtx(ctx, &resp, query, keyword)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActivitiesModel) List(ctx context.Context, page, pageSize int64, keyword string) ([]*Activities, int64, error) {
	var total int64
	// 条件处理
	whereCondition := "where `deleted_at`='2006-01-02 15:04:05'"
	if keyword != "" {
		whereCondition += "and title like '%" + keyword + "%'"
	}
	orderBy := "order by sort asc"

	items := make([]*Activities, 0)
	query := fmt.Sprintf("SELECT %s FROM %s %s %s LIMIT ? OFFSET ?", activitiesRows, m.table, whereCondition, orderBy)
	queryCount := fmt.Sprintf("SELECT count(1) FROM %s %s", m.table, whereCondition)

	err := m.CachedConn.QueryRowNoCacheCtx(ctx, &total, queryCount)
	// 查询错误
	if err != nil {
		return items, total, err
	}

	// 没有记录
	if total == 0 {
		return items, total, nil
	}

	//获取记录
	if page < 1 {
		page = 1
	}
	err = m.CachedConn.QueryRowsNoCache(&items, query, pageSize, pageSize*(page-1))
	if err != nil {
		if err == sqlx.ErrNotFound {
			return nil, total, ErrNotFound
		}
		return nil, total, err
	}

	return items, total, nil
}

func (m *defaultActivitiesModel) Insert(ctx context.Context, data *Activities) (sql.Result, error) {
	dbZeromicroActivitiesIdKey := fmt.Sprintf("%s%v", cacheDbZeromicroActivitiesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, activitiesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Address, data.TimeStart, data.TimeEnd, data.Description, data.Quantity, data.Cover, data.Sort, data.CreateBy, data.UpdateBy)
	}, dbZeromicroActivitiesIdKey)
	return ret, err
}

func (m *defaultActivitiesModel) Update(ctx context.Context, data *Activities) error {
	dbZeromicroActivitiesIdKey := fmt.Sprintf("%s%v", cacheDbZeromicroActivitiesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, activitiesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Address, data.TimeStart, data.TimeEnd, data.Description, data.Quantity, data.Cover, data.Sort, data.CreateBy, data.UpdateBy, data.Id)
	}, dbZeromicroActivitiesIdKey)
	return err
}

func (m *defaultActivitiesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDbZeromicroActivitiesIdPrefix, primary)
}

func (m *defaultActivitiesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", activitiesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActivitiesModel) tableName() string {
	return m.table
}
