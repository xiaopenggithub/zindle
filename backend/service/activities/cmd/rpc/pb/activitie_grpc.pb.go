// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: activitie.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivitysrvClient is the client API for Activitysrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivitysrvClient interface {
	//-----------------------活动信息表-----------------------
	AddActivities(ctx context.Context, in *AddActivitiesReq, opts ...grpc.CallOption) (*AddActivitiesResp, error)
	UpdateActivities(ctx context.Context, in *UpdateActivitiesReq, opts ...grpc.CallOption) (*UpdateActivitiesResp, error)
	DelActivities(ctx context.Context, in *DelActivitiesReq, opts ...grpc.CallOption) (*DelActivitiesResp, error)
	DelActivitiesBatch(ctx context.Context, in *DelActivitiesBatchReq, opts ...grpc.CallOption) (*DelActivitiesResp, error)
	GetActivitiesById(ctx context.Context, in *GetActivitiesByIdReq, opts ...grpc.CallOption) (*GetActivitiesByIdResp, error)
	SearchActivities(ctx context.Context, in *SearchActivitiesReq, opts ...grpc.CallOption) (*SearchActivitiesResp, error)
}

type activitysrvClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitysrvClient(cc grpc.ClientConnInterface) ActivitysrvClient {
	return &activitysrvClient{cc}
}

func (c *activitysrvClient) AddActivities(ctx context.Context, in *AddActivitiesReq, opts ...grpc.CallOption) (*AddActivitiesResp, error) {
	out := new(AddActivitiesResp)
	err := c.cc.Invoke(ctx, "/pb.activitysrv/AddActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitysrvClient) UpdateActivities(ctx context.Context, in *UpdateActivitiesReq, opts ...grpc.CallOption) (*UpdateActivitiesResp, error) {
	out := new(UpdateActivitiesResp)
	err := c.cc.Invoke(ctx, "/pb.activitysrv/UpdateActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitysrvClient) DelActivities(ctx context.Context, in *DelActivitiesReq, opts ...grpc.CallOption) (*DelActivitiesResp, error) {
	out := new(DelActivitiesResp)
	err := c.cc.Invoke(ctx, "/pb.activitysrv/DelActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitysrvClient) DelActivitiesBatch(ctx context.Context, in *DelActivitiesBatchReq, opts ...grpc.CallOption) (*DelActivitiesResp, error) {
	out := new(DelActivitiesResp)
	err := c.cc.Invoke(ctx, "/pb.activitysrv/DelActivitiesBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitysrvClient) GetActivitiesById(ctx context.Context, in *GetActivitiesByIdReq, opts ...grpc.CallOption) (*GetActivitiesByIdResp, error) {
	out := new(GetActivitiesByIdResp)
	err := c.cc.Invoke(ctx, "/pb.activitysrv/GetActivitiesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitysrvClient) SearchActivities(ctx context.Context, in *SearchActivitiesReq, opts ...grpc.CallOption) (*SearchActivitiesResp, error) {
	out := new(SearchActivitiesResp)
	err := c.cc.Invoke(ctx, "/pb.activitysrv/SearchActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitysrvServer is the server API for Activitysrv service.
// All implementations must embed UnimplementedActivitysrvServer
// for forward compatibility
type ActivitysrvServer interface {
	//-----------------------活动信息表-----------------------
	AddActivities(context.Context, *AddActivitiesReq) (*AddActivitiesResp, error)
	UpdateActivities(context.Context, *UpdateActivitiesReq) (*UpdateActivitiesResp, error)
	DelActivities(context.Context, *DelActivitiesReq) (*DelActivitiesResp, error)
	DelActivitiesBatch(context.Context, *DelActivitiesBatchReq) (*DelActivitiesResp, error)
	GetActivitiesById(context.Context, *GetActivitiesByIdReq) (*GetActivitiesByIdResp, error)
	SearchActivities(context.Context, *SearchActivitiesReq) (*SearchActivitiesResp, error)
	mustEmbedUnimplementedActivitysrvServer()
}

// UnimplementedActivitysrvServer must be embedded to have forward compatible implementations.
type UnimplementedActivitysrvServer struct {
}

func (UnimplementedActivitysrvServer) AddActivities(context.Context, *AddActivitiesReq) (*AddActivitiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActivities not implemented")
}
func (UnimplementedActivitysrvServer) UpdateActivities(context.Context, *UpdateActivitiesReq) (*UpdateActivitiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivities not implemented")
}
func (UnimplementedActivitysrvServer) DelActivities(context.Context, *DelActivitiesReq) (*DelActivitiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelActivities not implemented")
}
func (UnimplementedActivitysrvServer) DelActivitiesBatch(context.Context, *DelActivitiesBatchReq) (*DelActivitiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelActivitiesBatch not implemented")
}
func (UnimplementedActivitysrvServer) GetActivitiesById(context.Context, *GetActivitiesByIdReq) (*GetActivitiesByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivitiesById not implemented")
}
func (UnimplementedActivitysrvServer) SearchActivities(context.Context, *SearchActivitiesReq) (*SearchActivitiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchActivities not implemented")
}
func (UnimplementedActivitysrvServer) mustEmbedUnimplementedActivitysrvServer() {}

// UnsafeActivitysrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivitysrvServer will
// result in compilation errors.
type UnsafeActivitysrvServer interface {
	mustEmbedUnimplementedActivitysrvServer()
}

func RegisterActivitysrvServer(s grpc.ServiceRegistrar, srv ActivitysrvServer) {
	s.RegisterService(&Activitysrv_ServiceDesc, srv)
}

func _Activitysrv_AddActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActivitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitysrvServer).AddActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitysrv/AddActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitysrvServer).AddActivities(ctx, req.(*AddActivitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activitysrv_UpdateActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitysrvServer).UpdateActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitysrv/UpdateActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitysrvServer).UpdateActivities(ctx, req.(*UpdateActivitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activitysrv_DelActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelActivitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitysrvServer).DelActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitysrv/DelActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitysrvServer).DelActivities(ctx, req.(*DelActivitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activitysrv_DelActivitiesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelActivitiesBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitysrvServer).DelActivitiesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitysrv/DelActivitiesBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitysrvServer).DelActivitiesBatch(ctx, req.(*DelActivitiesBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activitysrv_GetActivitiesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivitiesByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitysrvServer).GetActivitiesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitysrv/GetActivitiesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitysrvServer).GetActivitiesById(ctx, req.(*GetActivitiesByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activitysrv_SearchActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchActivitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitysrvServer).SearchActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitysrv/SearchActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitysrvServer).SearchActivities(ctx, req.(*SearchActivitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Activitysrv_ServiceDesc is the grpc.ServiceDesc for Activitysrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activitysrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.activitysrv",
	HandlerType: (*ActivitysrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddActivities",
			Handler:    _Activitysrv_AddActivities_Handler,
		},
		{
			MethodName: "UpdateActivities",
			Handler:    _Activitysrv_UpdateActivities_Handler,
		},
		{
			MethodName: "DelActivities",
			Handler:    _Activitysrv_DelActivities_Handler,
		},
		{
			MethodName: "DelActivitiesBatch",
			Handler:    _Activitysrv_DelActivitiesBatch_Handler,
		},
		{
			MethodName: "GetActivitiesById",
			Handler:    _Activitysrv_GetActivitiesById_Handler,
		},
		{
			MethodName: "SearchActivities",
			Handler:    _Activitysrv_SearchActivities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activitie.proto",
}
