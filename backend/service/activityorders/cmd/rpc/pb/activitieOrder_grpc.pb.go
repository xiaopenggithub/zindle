// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: activitieOrder.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivitieOrdersvcClient is the client API for ActivitieOrdersvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivitieOrdersvcClient interface {
	//-----------------------活动订单表-----------------------
	ActivityOrdersAdd(ctx context.Context, in *AddActivityOrdersReq, opts ...grpc.CallOption) (*AddActivityOrdersResp, error)
	ActivityOrdersUpdate(ctx context.Context, in *UpdateActivityOrdersReq, opts ...grpc.CallOption) (*UpdateActivityOrdersResp, error)
	ActivityOrdersDel(ctx context.Context, in *DelActivityOrdersReq, opts ...grpc.CallOption) (*DelActivityOrdersResp, error)
	ActivityOrdersDelBatch(ctx context.Context, in *DelActivityOrdersBatchReq, opts ...grpc.CallOption) (*DelActivityOrdersResp, error)
	ActivityOrdersGetById(ctx context.Context, in *GetActivityOrdersByIdReq, opts ...grpc.CallOption) (*GetActivityOrdersByIdResp, error)
	ActivityOrdersSearch(ctx context.Context, in *SearchActivityOrdersReq, opts ...grpc.CallOption) (*SearchActivityOrdersResp, error)
}

type activitieOrdersvcClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitieOrdersvcClient(cc grpc.ClientConnInterface) ActivitieOrdersvcClient {
	return &activitieOrdersvcClient{cc}
}

func (c *activitieOrdersvcClient) ActivityOrdersAdd(ctx context.Context, in *AddActivityOrdersReq, opts ...grpc.CallOption) (*AddActivityOrdersResp, error) {
	out := new(AddActivityOrdersResp)
	err := c.cc.Invoke(ctx, "/pb.activitieOrdersvc/ActivityOrdersAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitieOrdersvcClient) ActivityOrdersUpdate(ctx context.Context, in *UpdateActivityOrdersReq, opts ...grpc.CallOption) (*UpdateActivityOrdersResp, error) {
	out := new(UpdateActivityOrdersResp)
	err := c.cc.Invoke(ctx, "/pb.activitieOrdersvc/ActivityOrdersUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitieOrdersvcClient) ActivityOrdersDel(ctx context.Context, in *DelActivityOrdersReq, opts ...grpc.CallOption) (*DelActivityOrdersResp, error) {
	out := new(DelActivityOrdersResp)
	err := c.cc.Invoke(ctx, "/pb.activitieOrdersvc/ActivityOrdersDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitieOrdersvcClient) ActivityOrdersDelBatch(ctx context.Context, in *DelActivityOrdersBatchReq, opts ...grpc.CallOption) (*DelActivityOrdersResp, error) {
	out := new(DelActivityOrdersResp)
	err := c.cc.Invoke(ctx, "/pb.activitieOrdersvc/ActivityOrdersDelBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitieOrdersvcClient) ActivityOrdersGetById(ctx context.Context, in *GetActivityOrdersByIdReq, opts ...grpc.CallOption) (*GetActivityOrdersByIdResp, error) {
	out := new(GetActivityOrdersByIdResp)
	err := c.cc.Invoke(ctx, "/pb.activitieOrdersvc/ActivityOrdersGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitieOrdersvcClient) ActivityOrdersSearch(ctx context.Context, in *SearchActivityOrdersReq, opts ...grpc.CallOption) (*SearchActivityOrdersResp, error) {
	out := new(SearchActivityOrdersResp)
	err := c.cc.Invoke(ctx, "/pb.activitieOrdersvc/ActivityOrdersSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitieOrdersvcServer is the server API for ActivitieOrdersvc service.
// All implementations must embed UnimplementedActivitieOrdersvcServer
// for forward compatibility
type ActivitieOrdersvcServer interface {
	//-----------------------活动订单表-----------------------
	ActivityOrdersAdd(context.Context, *AddActivityOrdersReq) (*AddActivityOrdersResp, error)
	ActivityOrdersUpdate(context.Context, *UpdateActivityOrdersReq) (*UpdateActivityOrdersResp, error)
	ActivityOrdersDel(context.Context, *DelActivityOrdersReq) (*DelActivityOrdersResp, error)
	ActivityOrdersDelBatch(context.Context, *DelActivityOrdersBatchReq) (*DelActivityOrdersResp, error)
	ActivityOrdersGetById(context.Context, *GetActivityOrdersByIdReq) (*GetActivityOrdersByIdResp, error)
	ActivityOrdersSearch(context.Context, *SearchActivityOrdersReq) (*SearchActivityOrdersResp, error)
	mustEmbedUnimplementedActivitieOrdersvcServer()
}

// UnimplementedActivitieOrdersvcServer must be embedded to have forward compatible implementations.
type UnimplementedActivitieOrdersvcServer struct {
}

func (UnimplementedActivitieOrdersvcServer) ActivityOrdersAdd(context.Context, *AddActivityOrdersReq) (*AddActivityOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityOrdersAdd not implemented")
}
func (UnimplementedActivitieOrdersvcServer) ActivityOrdersUpdate(context.Context, *UpdateActivityOrdersReq) (*UpdateActivityOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityOrdersUpdate not implemented")
}
func (UnimplementedActivitieOrdersvcServer) ActivityOrdersDel(context.Context, *DelActivityOrdersReq) (*DelActivityOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityOrdersDel not implemented")
}
func (UnimplementedActivitieOrdersvcServer) ActivityOrdersDelBatch(context.Context, *DelActivityOrdersBatchReq) (*DelActivityOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityOrdersDelBatch not implemented")
}
func (UnimplementedActivitieOrdersvcServer) ActivityOrdersGetById(context.Context, *GetActivityOrdersByIdReq) (*GetActivityOrdersByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityOrdersGetById not implemented")
}
func (UnimplementedActivitieOrdersvcServer) ActivityOrdersSearch(context.Context, *SearchActivityOrdersReq) (*SearchActivityOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityOrdersSearch not implemented")
}
func (UnimplementedActivitieOrdersvcServer) mustEmbedUnimplementedActivitieOrdersvcServer() {}

// UnsafeActivitieOrdersvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivitieOrdersvcServer will
// result in compilation errors.
type UnsafeActivitieOrdersvcServer interface {
	mustEmbedUnimplementedActivitieOrdersvcServer()
}

func RegisterActivitieOrdersvcServer(s grpc.ServiceRegistrar, srv ActivitieOrdersvcServer) {
	s.RegisterService(&ActivitieOrdersvc_ServiceDesc, srv)
}

func _ActivitieOrdersvc_ActivityOrdersAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActivityOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitieOrdersvc/ActivityOrdersAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersAdd(ctx, req.(*AddActivityOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivitieOrdersvc_ActivityOrdersUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitieOrdersvc/ActivityOrdersUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersUpdate(ctx, req.(*UpdateActivityOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivitieOrdersvc_ActivityOrdersDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelActivityOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitieOrdersvc/ActivityOrdersDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersDel(ctx, req.(*DelActivityOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivitieOrdersvc_ActivityOrdersDelBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelActivityOrdersBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersDelBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitieOrdersvc/ActivityOrdersDelBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersDelBatch(ctx, req.(*DelActivityOrdersBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivitieOrdersvc_ActivityOrdersGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityOrdersByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitieOrdersvc/ActivityOrdersGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersGetById(ctx, req.(*GetActivityOrdersByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivitieOrdersvc_ActivityOrdersSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchActivityOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.activitieOrdersvc/ActivityOrdersSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitieOrdersvcServer).ActivityOrdersSearch(ctx, req.(*SearchActivityOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivitieOrdersvc_ServiceDesc is the grpc.ServiceDesc for ActivitieOrdersvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivitieOrdersvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.activitieOrdersvc",
	HandlerType: (*ActivitieOrdersvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivityOrdersAdd",
			Handler:    _ActivitieOrdersvc_ActivityOrdersAdd_Handler,
		},
		{
			MethodName: "ActivityOrdersUpdate",
			Handler:    _ActivitieOrdersvc_ActivityOrdersUpdate_Handler,
		},
		{
			MethodName: "ActivityOrdersDel",
			Handler:    _ActivitieOrdersvc_ActivityOrdersDel_Handler,
		},
		{
			MethodName: "ActivityOrdersDelBatch",
			Handler:    _ActivitieOrdersvc_ActivityOrdersDelBatch_Handler,
		},
		{
			MethodName: "ActivityOrdersGetById",
			Handler:    _ActivitieOrdersvc_ActivityOrdersGetById_Handler,
		},
		{
			MethodName: "ActivityOrdersSearch",
			Handler:    _ActivitieOrdersvc_ActivityOrdersSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activitieOrder.proto",
}
